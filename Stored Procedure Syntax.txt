# SQL Stored Procedures

A stored procedure is a prepared SQL code that you can save, 
so the code can be reused over and over again.

So if you have an SQL query that you write over and over again, 
save it as a stored procedure, 
and then just call it to execute it.

You can also pass parameters to a stored procedure, 
so that the stored procedure can act based on the parameter value(s) that is passed.

-- Stored Procedure Syntax
delimiter //
CREATE PROCEDURE procedure_name()
BEGIN sql_statement; END// 

-- Execute a Stored Procedure
EXEC procedure_name;

# Demo Database

SELECT * FROM marks;
+----+-------------------------------+-------+-----+
| id | course_name                   | score | sid |
+----+-------------------------------+-------+-----+
|  1 | AI In Real World Using Python |    14 |  38 |
|  2 | AI In Real World Using Python |    99 |  51 |
|  3 | GIMP Photo Editing            |    51 |  29 |
|  4 | SQLite Tutorial               |    57 |  13 |
|  5 | Swing GUI In Depth            |    31 |  34 |
|  6 | CSS3                          |    83 |  36 |
|  7 | Codeigniter                   |    22 |  39 |
|  8 | 2D Games Using PyGame         |    60 |  37 |
|  9 | Data Structure In Depth       |    31 |  32 |
| 10 | Amazon Cloud AWS              |    76 |  12 |
| 11 | Amazon Cloud AWS              |    86 |  27 |
| 12 | Computer Networks             |     2 |  34 |
| 13 | Swing GUI In Depth            |    52 |   1 |
| 14 | Dynamic Website Development   |    52 |   3 |
| 15 | CakePHP                       |     2 |  27 |
| 16 | Natural Language Processing   |    55 |   6 |
| 17 | HTML                          |    68 |   6 |
| 18 | Computer Vision Using Python  |    72 |  47 |
| 19 | Computer Vision Using Python  |    58 |  24 |
| 20 | Data Structure In Depth       |    70 |  14 |
| 21 | Kali Linux                    |    76 |  18 |
| 22 | Java Complete Tutorial        |    67 |  32 |
| 23 | Java Database Connectivity    |     8 |  25 |
| 24 | The C Ninja                   |    39 |  10 |
| 25 | SQLite Tutorial               |    69 |  60 |
+----+-------------------------------+-------+-----+
25 rows in set (0.00 sec)


# Create Store Procedure
delimiter //
create procedure foobar()
begin select * from marks; end//
Query OK, 0 rows affected (0.00 sec)


delimiter ;

# Set the delimiter back and look at the procedure:
SHOW PROCEDURE status;
+-------------+--------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+
| Db          | Name   | Type      | Definer        | Modified            | Created             | Security_type | Comment | character_set_client | collation_connection | Database Collation |
+-------------+--------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+
| gangulytech | foobar | PROCEDURE | root@localhost | 2019-06-04 11:53:46 | 2019-06-04 11:53:46 | DEFINER       |         | cp850                | cp850_general_ci     | latin1_swedish_ci  |
+-------------+--------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+
1 row in set (0.00 sec)

# Another Way

select * from employee;
+--------+----------+---------+--------+
| emp_id | emp_name | dept_id | salary |
+--------+----------+---------+--------+
|    103 | Jack     |       1 |   1400 |
|    104 | John     |       2 |   1450 |
|    108 | Alan     |       3 |   1150 |
|    107 | Ram      |    NULL |    600 |
+--------+----------+---------+--------+
4 rows in set (0.22 sec)


mysql> DELIMITER //
mysql> create procedure usp_totalEmployeeByDeparment(IN id INT)
    -> begin
    -> select count(*) as total from employee where dept_id = id;
    -> end//
Query OK, 0 rows affected (0.00 sec)

mysql> DELIMITER ;

mysql> call usp_totalEmployeeByDeparment(2);
+-------+
| total |
+-------+
|     1 |
+-------+
1 row in set (0.06 sec)



# Creating and Calling MySQL stored procedure with IN and OUT parameters.

mysql> DELIMITER //
mysql> create procedure usp_GetEmployeeName(IN id INT, OUT name VARCHAR(20))
    -> begin
    -> select emp_name into name from employee where emp_id = id;
    -> end//
Query OK, 0 rows affected (0.52 sec)

mysql> DELIMITER ;

mysql> call usp_GetEmployeeName(103, @name);
Query OK, 1 row affected (0.05 sec)


mysql> select @name;
+-------+
| @name |
+-------+
| Jack  |
+-------+
1 row in set (0.00 sec)

# VIEW ALL PROCEDURE
mysql> SHOW PROCEDURE STATUS;

# DROP PROCEDURE
mysql> DROP PROCEDURE usp_totalEmployeeByDeparment;

mysql> DROP PROCEDURE IF EXISTS usp_totalEmployeeByDeparment;






